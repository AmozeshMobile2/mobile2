package ir.sadadpsp.merchant.view.activities;

import android.app.TimePickerDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.res.Resources;
import android.os.Bundle;
import android.os.Handler;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.Transformation;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import java.io.IOException;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Locale;
import java.util.Timer;

import androidx.annotation.Nullable;
import androidx.databinding.DataBindingUtil;
import androidx.lifecycle.Observer;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import com.aminography.primecalendar.PrimeCalendar;
import com.aminography.primecalendar.persian.PersianCalendar;
import com.aminography.primedatepicker.picker.PrimeDatePicker;
import com.aminography.primedatepicker.picker.callback.RangeDaysPickCallback;
import com.b4a.manamsoftware.PersianDate.ManamPersianDate;
import com.google.gson.Gson;

import ir.sadadpsp.merchant.R;
import ir.sadadpsp.merchant.dao.models.TxnModel;
import ir.sadadpsp.merchant.databinding.ActivityReportBinding;
import ir.sadadpsp.merchant.util.FileLogger;
import ir.sadadpsp.merchant.util.UIUtil;

import ir.sadadpsp.merchant.util.primedatepicker.DatePickerActivity;
import ir.sadadpsp.merchant.viewmodel.ReportViewModel;
import ir.sadadpsp.merchant.widget.ReportRecycleViewAdapter;

import static ir.sadadpsp.merchant.util.FormatUtil.convertIntToMonthMiladi;


public class ReportActivity extends BaseActivity<ReportViewModel> implements View.OnClickListener {

    private ActivityReportBinding binding;
    private ReportRecycleViewAdapter recyclerViewAdapter;
    private TextView totalPrice, totalCount;
    private long totalP = 0L;
    private Long totalC = 1L;
    private RecyclerView recyclerView;
    private Button collapseView, reportDaily, btnAll, btnSale, btnCharge, billBtn, printTotal, printDetails;
    private LinearLayout viewFilter;
    private boolean isCollapse = false;
    private boolean clickOnBtn = false;
    private boolean typeRange, typeDetails = false;
    Button showDatePicker;
    int type = 0;
    String startDateShort;
    String endDateShort;
    int countSale;
    long totalSale;
    int countCharge;
    long totalCharge;
    int countBill;
    long totalBill;
    String ibanTitle;

    public ReportActivity() {
        super(ReportViewModel.class);
    }

    @Override
    protected void onResume() {
        super.onResume();
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = DataBindingUtil.setContentView(this, R.layout.activity_report);
        binding.setViewModel(getViewModel());
        Bundle bundle = getIntent().getExtras();
        long ibanId = bundle != null ? bundle.getLong("ibanId") : 0;
        ibanTitle = bundle != null ? bundle.getString("ibanTitle") : "";
        getViewModel().ibanId.postValue(ibanId);
        new Handler().postDelayed(() -> getViewModel().fetchTransactions(),300);

        totalCount = findViewById(R.id.total_count);
        totalPrice = findViewById(R.id.total_price);
        collapseView = findViewById(R.id.collapseView);
        viewFilter = findViewById(R.id.view_filter);
        showDatePicker = findViewById(R.id.showDatePicker);
        recyclerView = findViewById(R.id.txn_recycler_view);
        reportDaily = findViewById(R.id.report_daily);

        printTotal = findViewById(R.id.printTotal);
        btnAll = findViewById(R.id.btn_all);
        btnSale = findViewById(R.id.btn_sale);
        btnCharge = findViewById(R.id.btn_charge);
        billBtn = findViewById(R.id.bill_btn);
        printDetails = findViewById(R.id.print_details);
        btnAll.setBackgroundResource(R.drawable.back_btn_selected);

        collapseView.setOnClickListener(this);
        showDatePicker.setOnClickListener(this);
        reportDaily.setOnClickListener(this);
        btnAll.setOnClickListener(this);
        btnSale.setOnClickListener(this);
        btnCharge.setOnClickListener(this);
        billBtn.setOnClickListener(this);
        printTotal.setOnClickListener(this);
        printDetails.setOnClickListener(this);

        FileLogger fileLogger = new FileLogger();
        try {
            fileLogger.init();
        } catch (IOException e) {
            e.printStackTrace();
        }
        try{
            observeViewModel();
        }catch (Exception e){
            fileLogger.writeLog("LOAD_TXN_DB","ERROR",e.getMessage());
        }
    }

    /**
     * Bind view models to view elements
     */
    private void observeViewModel() {
        recyclerViewAdapter = new ReportRecycleViewAdapter(new ArrayList<TxnModel>(), this);
        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        recyclerView.setAdapter(recyclerViewAdapter);

        sortQueryDate();

        getViewModel().txnList.observe(this, new Observer<List<TxnModel>>() {
            @Override
            public void onChanged(@Nullable List<TxnModel> items) {
                recyclerViewAdapter.addItems(items);
                if (items != null) {
                    if (items.isEmpty()) {
                        Toast.makeText(ReportActivity.this, "موردی یافت نشد", Toast.LENGTH_LONG).show();
                    }
                    System.out.println(new Gson().toJson(items));
                    totalP = 0;
                    recyclerView.setItemViewCacheSize(items.size());
                    calcPriceAndCount(items);
                }
            }
        });

        if (getViewModel().saleListDb != null) {
            getViewModel().saleListDb.observe(this, new Observer<List<TxnModel>>() {
                @Override
                public void onChanged(List<TxnModel> txnModels) {
                    recyclerViewAdapter.addItems(txnModels);
                    if (txnModels != null) {
                        totalP = 0;

                        recyclerView.setItemViewCacheSize(txnModels.size());
                        calcPriceAndCount(txnModels);
                    }
                }
            });
        }
    }

    private void calcPriceAndCount(List<TxnModel> items) {
        for (int i = 0; i < items.size(); i++) {
            totalC = 1L;
            totalP = totalP + Long.parseLong(items.get(i).getAmount());
            totalC = totalC + i;

            DecimalFormat format = new DecimalFormat("#,###");
            BigDecimal bigDecimal = new BigDecimal(totalP);
            totalCount.setText("مجموع تعداد تراکنش: " + totalC.toString() + " " + "عدد");
            totalPrice.setText("مجموع قیمت: " + format.format(bigDecimal) + " " + "ریال");
        }
        if (items.isEmpty()) {
            totalCount.setText("مجموع تعداد تراکنش: " + 0 + " " + "عدد");
            totalPrice.setText("مجموع قیمت: " + 0 + " " + "ریال");
        }
    }

    public void back(View view) {
        finish();
    }

    boolean isDaily = false;

    @Override
    public void onClick(View view) {
        if (view.getId() == R.id.collapseView) {
            isDaily = false;
            if (isCollapse) {
                expand(viewFilter);
                collapseView.setCompoundDrawablesWithIntrinsicBounds(
                        0, //left
                        0, //top
                        R.drawable.ic_expand_less, //right
                        0);
                isCollapse = false;
            } else {
                collapse(viewFilter);
                collapseView.setCompoundDrawablesWithIntrinsicBounds(
                        0, //left
                        0, //top
                        R.drawable.ic_expand_more, //right
                        0);
                isCollapse = true;
            }
        }
        else if (view.getId() == R.id.showDatePicker) {
            isDaily = false;
            showDatePicker();
        }
        else if (view.getId() == R.id.report_daily) {
            isDaily = true;
            totalPrice.setVisibility(View.GONE);
            totalCount.setVisibility(View.GONE);
            getViewModel().saleList();
        }
        else if (view.getId() == R.id.btn_all) {
            isDaily = false;
            totalPrice.setVisibility(View.VISIBLE);
            totalCount.setVisibility(View.VISIBLE);
            btnAll.setTag(0);
            type = 0;
            getViewModel().filter(type);
            btnAll.setBackgroundResource(R.drawable.back_btn_selected);
            btnSale.setBackgroundResource(R.drawable.back_btn);
            btnCharge.setBackgroundResource(R.drawable.back_btn);
            billBtn.setBackgroundResource(R.drawable.back_btn);
        }
        else if (view.getId() == R.id.btn_sale) {
            isDaily = false;
            totalPrice.setVisibility(View.VISIBLE);
            totalCount.setVisibility(View.VISIBLE);
            btnSale.setTag(3);
            type = 3;
            getViewModel().filter(type);
            btnSale.setBackgroundResource(R.drawable.back_btn_selected);
            btnAll.setBackgroundResource(R.drawable.back_btn);
            btnCharge.setBackgroundResource(R.drawable.back_btn);
            billBtn.setBackgroundResource(R.drawable.back_btn);
        }
        else if (view.getId() == R.id.btn_charge) {
            isDaily = false;
            totalPrice.setVisibility(View.VISIBLE);
            totalCount.setVisibility(View.VISIBLE);
            btnCharge.setTag(4);
            type = 4;
            getViewModel().filter(type);
            btnCharge.setBackgroundResource(R.drawable.back_btn_selected);
            btnSale.setBackgroundResource(R.drawable.back_btn);
            btnAll.setBackgroundResource(R.drawable.back_btn);
            billBtn.setBackgroundResource(R.drawable.back_btn);
        }
        else if (view.getId() == R.id.bill_btn) {
            isDaily = false;
            totalPrice.setVisibility(View.VISIBLE);
            totalCount.setVisibility(View.VISIBLE);
            billBtn.setTag(5);
            type = 5;
            getViewModel().filter(type);
            billBtn.setBackgroundResource(R.drawable.back_btn_selected);
            btnCharge.setBackgroundResource(R.drawable.back_btn);
            btnSale.setBackgroundResource(R.drawable.back_btn);
            btnAll.setBackgroundResource(R.drawable.back_btn);
        }
        else if (view.getId() == R.id.printTotal) {
            isDaily = false;
            typeRange = true;
            typeDetails = false;
            showDatePicker();
        }
        else if (view.getId() == R.id.print_details) {
            isDaily = false;
            typeDetails = true;
            typeRange = false;
            showDatePicker();
        }
        else {
            if (isDaily) {
                return;
            }
            final TxnModel txnModel = (TxnModel) view.getTag();
            String data = "";
//            type = txnModel.getType();

            String time = formatTime(txnModel.getTxnDate());
            Date mDate = new Date(txnModel.getTxnDate());

            data += "شماره پیگیری : " + txnModel.getTrace() + "\r\n\r\n";
            data += "شماره مرجع : " + txnModel.getRrn() + "\r\n\r\n";
            data += "صادر کننده : " + getStringByIdName(this, getIssuer(txnModel.getMaskedPan())) + "\r\n\r\n";
            data += "تاریخ / ساعت : " + shamsiDate(mDate) + " / " + time + "\r\n\r\n";

            if (txnModel.getProvider() != null)
                data += "نوع : " + txnModel.getProvider() + "\r\n\r\n";

            if (txnModel.getProvider() != null)
                data += "سریال : " + txnModel.getChargeSerial() + "\r\n\r\n";

            if (txnModel.getBillId() != null)
                data += "ش.ق : " + txnModel.getBillId() + "\r\n\r\n";

            if (txnModel.getPaymentId() != null)
                data += "ش.پ : " + txnModel.getPaymentId() + "\r\n\r\n";

            if (txnModel.getMaskedPan() != null)
                data += "شماره کارت : " +  "\u200E" + txnModel.getMaskedPan() + "\u200E" + "\r\n\r\n";

            if (txnModel.getTrace() != null && txnModel.getRrn() != null) {
                UIUtil.showAlert(this, data,
                        new UIUtil.UIButton("چاپ", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialogInterface, int i) {
                                getViewModel().getActivityContext(ReportActivity.this);
                                getViewModel().doPrint(txnModel);
                            }
                        }
                        ),
                        new UIUtil.UIButton("بستن", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialogInterface, int i) {
                                dialogInterface.dismiss();
                            }
                        }
                        ));
            }
        }
        /*    *//*new UiHelper.AlertButton("چاپ", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        dialogInterface.dismiss();
                        //print(txnModel);
                    }
                })*//*
        //viewModel.deleteItem(borrowModel);*/
    }

    public static String getIssuer(String maskedPan) {
        if (maskedPan != null && maskedPan.length() < 6)
            return "";
        if (maskedPan != null) {
            return "txn_info_issuer_" + maskedPan.substring(0, 6);
        } else {
            return "";
        }
    }

    public String getStringByIdName(Context context, String idName) {
        Resources res = context.getResources();
        return res.getString(res.getIdentifier(idName, "string", context.getPackageName()));
    }

    public static String formatTime(Long dataModel) {
        String[] miladi = new Date(dataModel).toString().split(" ");
        String timeMiladi = miladi[3].replace(":", "");
        timeMiladi = timeMiladi.substring(0, 2) + ":" + timeMiladi.substring(2, 4) + ":" + timeMiladi.substring(4, 6);
        return timeMiladi;
    }

    public static String shamsiDate(Date miladiDate) {
        ManamPersianDate date = new ManamPersianDate();
        String[] miladi = miladiDate.toString().split(" ");
        return date.GregorianToPersian(Integer.parseInt(miladi[5]),
                convertIntToMonthMiladi(miladi[1]), Integer.parseInt(miladi[2]));
    }

//    long StartDateMiliSeconde, endDateMiliSeconde;
    private void showDatePicker() {
        PrimeCalendar today = new PersianCalendar();
        Calendar calendar = Calendar.getInstance();
        int hour = calendar.get(Calendar.HOUR_OF_DAY);
        int minute = calendar.get(Calendar.MINUTE);
        TimePickerDialog timePickerDialog = new TimePickerDialog(this, new TimePickerDialog.OnTimeSetListener() {
            @Override
            public void onTimeSet(TimePicker view, int selectHour, int selectMinute) {
                String time= selectHour + ":" + String.format("%02d",selectMinute);
                Toast.makeText(ReportActivity.this, "time is "+ time, Toast.LENGTH_SHORT).show();
            }
        },
                hour,
                minute,
                true
        );

                RangeDaysPickCallback callback = new RangeDaysPickCallback() {
            @Override
            public void onRangeDaysPicked(PrimeCalendar startDay, PrimeCalendar endDay) {
                if (startDay != null && endDay != null) {

                    GregorianCalendar startGregorian = new GregorianCalendar();
                    startGregorian.setTime(startDay.getTime());

                    int startYear = startGregorian.get(Calendar.YEAR);
                    int startMonth = startGregorian.get(Calendar.MONTH) + 1;
                    int startDayOfMonth = startGregorian.get(Calendar.DAY_OF_MONTH);

                    GregorianCalendar endGregorian = new GregorianCalendar();
                    endGregorian.setTime(endDay.getTime());

                    int endYear = endGregorian.get(Calendar.YEAR);
                    int endMonth = endGregorian.get(Calendar.MONTH) + 1;
                    int endDayOfMonth = endGregorian.get(Calendar.DAY_OF_MONTH);

                    String miladiStart = String.format("%04d/%02d/%02d 00:00:00", startYear, startMonth, startDayOfMonth);
                    String miladiEnd = String.format("%04d/%02d/%02d 23:59:59", endYear, endMonth, endDayOfMonth);

                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss", Locale.US);
                    try {
                        Date dateStart = sdf.parse(miladiStart);
                        Date dateEnd = sdf.parse(miladiEnd);

                        long startDateMillis = dateStart.getTime();
                        long endDateMillis = dateEnd.getTime();

                        getViewModel().filterByDate(type, startDateMillis, endDateMillis);

                        startDateShort = startDay.getShortDateString();
                        endDateShort = endDay.getShortDateString();

                    } catch (ParseException e) {
                        e.printStackTrace();
                    }
                }
            }
        };

        PrimeDatePicker datePicker = PrimeDatePicker.Companion.dialogWith(today)
                .pickRangeDays(callback)
                .applyTheme(new  DatePickerActivity().getDefaultTheme(this))
                .maxPossibleDate(today)
                .build();

        datePicker.show(getSupportFragmentManager(), "DATE_PICKER");
        timePickerDialog.show();

    }
    private String priceFormat(long amount) {
        DecimalFormat format = new DecimalFormat("#,###");
        BigDecimal bigDecimal = new BigDecimal(amount);
        return format.format(bigDecimal);
    }

    private void sortQueryDate() {
        getViewModel().txnFilterDateList.observe(this, new Observer<List<TxnModel>>() {
            @Override
            public void onChanged(@Nullable List<TxnModel> items) {
                if (items != null && items.isEmpty()){
                    recyclerViewAdapter.addItems(items);
                    totalP = 0;
                    countSale = 0;
                    totalSale = 0;
                    countCharge = 0;
                    totalCharge = 0;
                    countBill = 0;
                    totalBill = 0;
                    totalP = 0;
                    totalC = 0L;
                    totalCount.setText("مجموع تعداد تراکنش: " + 0 + " " + "عدد");
                    totalPrice.setText("مجموع قیمت: " + 0 + " " + "ریال");
                }
                if (items != null && !items.isEmpty()) {
                    recyclerViewAdapter.addItems(items);
                    totalP = 0;

                    countSale = 0;
                    totalSale = 0;
                    countCharge = 0;
                    totalCharge = 0;
                    countBill = 0;
                    totalBill = 0;
                    recyclerView.setItemViewCacheSize(items.size());
                    calcPriceAndCount(items);

                    for (int i = 0; i < items.size(); i++) {
                        if (items.get(i).getType() == 3) {
                            countSale += 1;
                            totalSale += Long.parseLong(items.get(i).getAmount());
                        } else if (items.get(i).getType() == 4) {
                            countCharge += 1;
                            totalCharge += Long.parseLong(items.get(i).getAmount());
                        } else if (items.get(i).getType() == 5) {
                            countBill += 1;
                            totalBill += Long.parseLong(items.get(i).getAmount());
                        }
                    }

                    if (typeRange) {
                        ArrayList<TxnModel> txnModelArrayList = (ArrayList<TxnModel>) items;
                        typeRange = false;
                        getViewModel().doPrint("range_date", startDateShort, endDateShort,
                                String.valueOf(countSale), String.valueOf(countCharge), String.valueOf(countBill), priceFormat(totalSale),
                                priceFormat(totalCharge), priceFormat(totalBill), txnModelArrayList,ibanTitle
                        ,false,null);
                    }
                    if (typeDetails) {
                        typeDetails = false;
                        ArrayList<TxnModel> txnModelArrayList = (ArrayList<TxnModel>) items;
                        getViewModel().doPrint(String.valueOf(type), startDateShort, endDateShort, txnModelArrayList , ibanTitle,false,null);
                    }
                }
            }
        });
    }

    public static void expand(final View v) {
        int matchParentMeasureSpec = View.MeasureSpec.makeMeasureSpec(((View) v.getParent()).getWidth(), View.MeasureSpec.EXACTLY);
        int wrapContentMeasureSpec = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);
        v.measure(matchParentMeasureSpec, wrapContentMeasureSpec);
        final int targetHeight = v.getMeasuredHeight();

        // Older versions of android (pre API 21) cancel animations for views with a height of 0.
        v.getLayoutParams().height = 1;
        v.setVisibility(View.VISIBLE);
        Animation a = new Animation() {
            @Override
            protected void applyTransformation(float interpolatedTime, Transformation t) {
                v.getLayoutParams().height = interpolatedTime == 1
                        ? RelativeLayout.LayoutParams.WRAP_CONTENT
                        : (int) (targetHeight * interpolatedTime);
                v.requestLayout();
            }

            @Override
            public boolean willChangeBounds() {
                return true;
            }
        };

        // Expansion speed of 1dp/ms
        a.setDuration((int) (targetHeight / v.getContext().getResources().getDisplayMetrics().density));
        v.startAnimation(a);
    }

    public static void collapse(final View v) {
        final int initialHeight = v.getMeasuredHeight();

        Animation a = new Animation() {
            @Override
            protected void applyTransformation(float interpolatedTime, Transformation t) {
                if (interpolatedTime == 1) {
                    v.setVisibility(View.GONE);
                } else {
                    v.getLayoutParams().height = initialHeight - (int) (initialHeight * interpolatedTime);
                    v.requestLayout();
                }
            }

            @Override
            public boolean willChangeBounds() {
                return true;
            }
        };

        // Collapse speed of 1dp/ms
        a.setDuration((int) (initialHeight / v.getContext().getResources().getDisplayMetrics().density));
        v.startAnimation(a);
    }
}
