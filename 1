package ir.yourapp.util;

import android.app.Activity;
import android.app.Application;
import android.os.Bundle;
import android.os.Handler;
import android.view.*;
import android.view.accessibility.AccessibilityEvent;

public class GlobalScreenDimmerManager implements Application.ActivityLifecycleCallbacks {

    private static GlobalScreenDimmerManager instance;

    private Activity currentActivity;
    private Handler handler = new Handler();
    private Runnable dimRunnable;

    // نور پله‌ای به ترتیب زمان (هر 4 ثانیه)
    private final float[] brightnessSteps = {1.0f, 0.8f, 0.5f, 0.2f, 0.05f};
    private int step = 0;

    private GlobalScreenDimmerManager() {}

    public static GlobalScreenDimmerManager getInstance() {
        if (instance == null) {
            instance = new GlobalScreenDimmerManager();
        }
        return instance;
    }

    public void init(Application application) {
        application.registerActivityLifecycleCallbacks(this);
    }

    @Override
    public void onActivityResumed(Activity activity) {
        currentActivity = activity;
        attachTouchInterceptor(activity);
        resetBrightness();
        startDimSequence();
    }

    @Override
    public void onActivityPaused(Activity activity) {
        if (currentActivity == activity) {
            currentActivity = null;
        }
        cancelDimSequence();
    }

    // متدهای بلااستفاده خالی بماند
    @Override public void onActivityCreated(Activity activity, Bundle savedInstanceState) {}
    @Override public void onActivityStarted(Activity activity) {}
    @Override public void onActivityStopped(Activity activity) {}
    @Override public void onActivitySaveInstanceState(Activity activity, Bundle outState) {}
    @Override public void onActivityDestroyed(Activity activity) {}

    private void attachTouchInterceptor(Activity activity) {
        final Window.Callback originalCallback = activity.getWindow().getCallback();
        activity.getWindow().setCallback(new Window.Callback() {
            @Override
            public boolean dispatchTouchEvent(MotionEvent event) {
                if (event.getAction() == MotionEvent.ACTION_DOWN) {
                    resetBrightness();
                    startDimSequence();
                }
                return originalCallback.dispatchTouchEvent(event);
            }
            // تمام متدهای دیگر فقط به originalCallback پاس داده می‌شوند:
            @Override public boolean dispatchKeyEvent(KeyEvent event) { return originalCallback.dispatchKeyEvent(event); }
            @Override public boolean dispatchKeyShortcutEvent(KeyEvent event) { return originalCallback.dispatchKeyShortcutEvent(event); }
            @Override public boolean dispatchTrackballEvent(MotionEvent event) { return originalCallback.dispatchTrackballEvent(event); }
            @Override public boolean dispatchGenericMotionEvent(MotionEvent event) { return originalCallback.dispatchGenericMotionEvent(event); }
            @Override public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) { return originalCallback.dispatchPopulateAccessibilityEvent(event); }
            @Override public View onCreatePanelView(int featureId) { return originalCallback.onCreatePanelView(featureId); }
            @Override public boolean onCreatePanelMenu(int featureId, Menu menu) { return originalCallback.onCreatePanelMenu(featureId, menu); }
            @Override public boolean onPreparePanel(int featureId, View view, Menu menu) { return originalCallback.onPreparePanel(featureId, view, menu); }
            @Override public boolean onMenuOpened(int featureId, Menu menu) { return originalCallback.onMenuOpened(featureId, menu); }
            @Override public boolean onMenuItemSelected(int featureId, MenuItem item) { return originalCallback.onMenuItemSelected(featureId, item); }
            @Override public void onWindowAttributesChanged(WindowManager.LayoutParams attrs) { originalCallback.onWindowAttributesChanged(attrs); }
            @Override public void onContentChanged() { originalCallback.onContentChanged(); }
            @Override public void onWindowFocusChanged(boolean hasFocus) { originalCallback.onWindowFocusChanged(hasFocus); }
            @Override public void onAttachedToWindow() { originalCallback.onAttachedToWindow(); }
            @Override public void onDetachedFromWindow() { originalCallback.onDetachedFromWindow(); }
            @Override public void onPanelClosed(int featureId, Menu menu) { originalCallback.onPanelClosed(featureId, menu); }
            @Override public boolean onSearchRequested() { return originalCallback.onSearchRequested(); }
            @Override public boolean onSearchRequested(SearchEvent searchEvent) { return originalCallback.onSearchRequested(searchEvent); }
            @Override public ActionMode onWindowStartingActionMode(ActionMode.Callback callback) { return originalCallback.onWindowStartingActionMode(callback); }
            @Override public ActionMode onWindowStartingActionMode(ActionMode.Callback callback, int type) { return originalCallback.onWindowStartingActionMode(callback, type); }
            @Override public void onActionModeStarted(ActionMode mode) { originalCallback.onActionModeStarted(mode); }
            @Override public void onActionModeFinished(ActionMode mode) { originalCallback.onActionModeFinished(mode); }
        });
    }

    private void startDimSequence() {
        cancelDimSequence();
        step = 0;
        dimRunnable = new Runnable() {
            @Override
            public void run() {
                if (currentActivity != null && step < brightnessSteps.length) {
                    WindowManager.LayoutParams params = currentActivity.getWindow().getAttributes();
                    params.screenBrightness = brightnessSteps[step];
                    currentActivity.getWindow().setAttributes(params);
                    step++;
                    handler.postDelayed(this, 4000); // هر ۴ ثانیه یک مرحله نور کم می‌شود
                }
            }
        };
        handler.postDelayed(dimRunnable, 4000);
    }

    private void cancelDimSequence() {
        if (dimRunnable != null) handler.removeCallbacks(dimRunnable);
    }

    private void resetBrightness() {
        if (currentActivity != null) {
            WindowManager.LayoutParams params = currentActivity.getWindow().getAttributes();
            params.screenBrightness = WindowManager.LayoutParams.BRIGHTNESS_OVERRIDE_NONE;
            currentActivity.getWindow().setAttributes(params);
        }
    }
}
